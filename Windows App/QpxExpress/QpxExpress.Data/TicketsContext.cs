// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace QpxExpress.Data
{
    using QpxExpress.Services;
    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.32.0.0")]
    public class TicketsContext : System.Data.Entity.DbContext, ITicketsContext
    {
        public System.Data.Entity.DbSet<Country> Countries { get; set; } // Country
        public System.Data.Entity.DbSet<Trip> Trips { get; set; } // Trip
        public System.Data.Entity.DbSet<TripDestination> TripDestinations { get; set; } // TripDestination
        public System.Data.Entity.DbSet<VwRemainingTrip> VwRemainingTrips { get; set; } // vw_RemainingTrips
        public System.Data.Entity.DbSet<VwTrip> VwTrips { get; set; } // vw_Trip
        public System.Data.Entity.DbSet<VwTripFare> VwTripFares { get; set; } // vw_TripFare

        static TicketsContext()
        {
            System.Data.Entity.Database.SetInitializer<TicketsContext>(null);
        }

        public TicketsContext()
            : base(ConfigurationProvider.ConnectionString)
        {
        }

        public TicketsContext(string connectionString)
            : base(connectionString)
        {
        }

        public TicketsContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public TicketsContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public TicketsContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CountryConfiguration());
            modelBuilder.Configurations.Add(new TripConfiguration());
            modelBuilder.Configurations.Add(new TripDestinationConfiguration());
            modelBuilder.Configurations.Add(new VwRemainingTripConfiguration());
            modelBuilder.Configurations.Add(new VwTripConfiguration());
            modelBuilder.Configurations.Add(new VwTripFareConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CountryConfiguration(schema));
            modelBuilder.Configurations.Add(new TripConfiguration(schema));
            modelBuilder.Configurations.Add(new TripDestinationConfiguration(schema));
            modelBuilder.Configurations.Add(new VwRemainingTripConfiguration(schema));
            modelBuilder.Configurations.Add(new VwTripConfiguration(schema));
            modelBuilder.Configurations.Add(new VwTripFareConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<SpGetTripFareReturnModel> SpGetTripFare(int? destinationId, string ticketType, bool? businessClass, System.DateTime? requestDate)
        {
            int procResult;
            return SpGetTripFare(destinationId, ticketType, businessClass, requestDate, out procResult);
        }

        public System.Collections.Generic.List<SpGetTripFareReturnModel> SpGetTripFare(int? destinationId, string ticketType, bool? businessClass, System.DateTime? requestDate, out int procResult)
        {
            var destinationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@destinationId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = destinationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!destinationId.HasValue)
                destinationIdParam.Value = System.DBNull.Value;

            var ticketTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ticketType", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ticketType, Size = 10 };
            if (ticketTypeParam.Value == null)
                ticketTypeParam.Value = System.DBNull.Value;

            var businessClassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@businessClass", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = businessClass.GetValueOrDefault() };
            if (!businessClass.HasValue)
                businessClassParam.Value = System.DBNull.Value;

            var requestDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@requestDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = requestDate.GetValueOrDefault() };
            if (!requestDate.HasValue)
                requestDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpGetTripFareReturnModel>("EXEC @procResult = [dbo].[sp_GetTripFare] @destinationId, @ticketType, @businessClass, @requestDate", destinationIdParam, ticketTypeParam, businessClassParam, requestDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpGetTripFareReturnModel>> SpGetTripFareAsync(int? destinationId, string ticketType, bool? businessClass, System.DateTime? requestDate)
        {
            var destinationIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@destinationId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = destinationId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!destinationId.HasValue)
                destinationIdParam.Value = System.DBNull.Value;

            var ticketTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ticketType", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = ticketType, Size = 10 };
            if (ticketTypeParam.Value == null)
                ticketTypeParam.Value = System.DBNull.Value;

            var businessClassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@businessClass", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = businessClass.GetValueOrDefault() };
            if (!businessClass.HasValue)
                businessClassParam.Value = System.DBNull.Value;

            var requestDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@requestDate", SqlDbType = System.Data.SqlDbType.Date, Direction = System.Data.ParameterDirection.Input, Value = requestDate.GetValueOrDefault() };
            if (!requestDate.HasValue)
                requestDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpGetTripFareReturnModel>("EXEC [dbo].[sp_GetTripFare] @destinationId, @ticketType, @businessClass, @requestDate", destinationIdParam, ticketTypeParam, businessClassParam, requestDateParam).ToListAsync();

            return procResultData;
        }

        public int SpUpdateCountries()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_UpdateCountries] ", procResultParam);

            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
